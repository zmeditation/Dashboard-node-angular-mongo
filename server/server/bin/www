#!/usr/bin/env node
const debug = require('debug')('node-rest:server');
const http = require('http');
const cluster = require('cluster');
const ClusterRunner = require('../services/child-process/cluster/cluster');
const { mongoDBListeners, mongoDBClose, mongoDBOptions } = require('./mongoDBConnection.js');
// const mongoose = require('mongoose');

require('dotenv').config({ path: `${__dirname}/../../.env` });

mongoDBListeners(process.env.DATABASE);

require('../database/mongoDB/migrations/UserModel');
require('../database/mongoDB/migrations/domainsModel');
require('../database/mongoDB/migrations/InvoiceModel');
require('../database/mongoDB/migrations/reportModel');
require('../database/mongoDB/migrations/CommissionReportsModel');
require('../database/mongoDB/migrations/permissionModel');
require('../database/mongoDB/migrations/APITokenModel');
require('../database/mongoDB/migrations/propertyModel');
require('../database/mongoDB/migrations/DeductionModel');
require('../database/mongoDB/migrations/NotificationsModel');
require('../database/mongoDB/migrations/NoticeModel');

const app = require('../../app');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '4845');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.timeout = 500000000;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    if (cluster.isWorker) {
      return 4846;
    }
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    console.log(error);
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`${cluster.isMaster ? 'Master-' : 'Worker-'}Server started on port ${port}`);
}


/**
 * CRON Events
 */
const {
  criteoAPIUpload,
  amazonAPIUpload,
  appNexusAPIUpload,
  // facebookAPIUpload,
  gamAPIUpload,
  // gamHBAPIUpload,
  gamAPIUploadMRG,
  // gamCommissionAPIUpload,
  yandexAPIUpload,
  // yandexIntAPIUpload,
  MyTargetAPI,
  pubMaticAPIUpload,
  rubiconAPIUpload,
  RTBHouseAPIUpload,
  smartAPIUpload,
  // TeadsAPIUpload,
  // bRealTimeAPIUpload,
  districtMAPIUpload,
  PubMaticToken,
  EPlanningAPIUpload,
  // AdNetMediaAPIUpload,
  LuponMediaAPIUpload,
  MediaNetAPIUpload,
  OneTagAPIUpload,
  SharethroughAPIUpload,
  IndexExchangeAPIUpload
} = require('../modules/reporting/APIUpload/config/cron.js');

const {
  updateManagersForLastThirtyDays,
  listForAdsTXT,
  DBAutoBackup,
  WriteAdUnitsInfo,
  deleteNoticesByDateCron,
  rewritePubsCountByMonth,
  revenueUpdate
  // WeeklyUpdateUserStatus,
  // FirstUpdateUserStatus
} = require('../services/cron');
const RequiredPaths = require('../services/helperFunctions/RequiredPaths/requiredPaths').default;
const { FileService } = require('../services/helperFunctions/FileService');

if (cluster.isMaster) {

  // Check all required paths and log if some path not exist
  new RequiredPaths(new FileService()).check();

// Запуск сокет сервера и кластера для дополнительных потоков

  const ClientSocket = require('../modules/wbid/services/Socket/socket-client');
  const Socket = new ClientSocket(process.env.WEBSOCKET_PORT || 5555);
  Socket.start();
  new ClusterRunner().start();

} else if (cluster.isWorker) {

  const workerJobs = [
    updateManagersForLastThirtyDays,
    listForAdsTXT,
    DBAutoBackup,
    WriteAdUnitsInfo,
    deleteNoticesByDateCron,
    rewritePubsCountByMonth,
    PubMaticToken,
    gamAPIUpload,
    gamAPIUploadMRG,
    EPlanningAPIUpload,
    MyTargetAPI,
    pubMaticAPIUpload,
    smartAPIUpload,
    rubiconAPIUpload,
    RTBHouseAPIUpload,
    yandexAPIUpload,
    criteoAPIUpload,
    amazonAPIUpload,
    appNexusAPIUpload,
    districtMAPIUpload,
    LuponMediaAPIUpload,
    MediaNetAPIUpload,
    OneTagAPIUpload,
    SharethroughAPIUpload,
    IndexExchangeAPIUpload
  ];

  let t = 0;
  workerJobs.forEach(job => {
    setTimeout(function() {
      job.start();
    }, t);
    t += 1000;
  });

  console.log('All cron tasks started');

  // WeeklyUpdateUserStatus.start();
  revenueUpdate.start();
  // FirstUpdateUserStatus.start();

}
